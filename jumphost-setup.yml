---
- name: Configure jumphost
  hosts: jumphost
  become: true
  vars:
    user_home: "{{ ansible_env.HOME }}"

  tasks:
    - name: Copy WL private key files to user directory
      copy:
        src: "{{ item }}"
        dest: "/home/{{ ansible_user }}/"
        mode: '0400'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      with_fileglob:
        - "*WL-private-key.pem"

    - name: Copy VM instance data file
      copy:
        src: vm-instance-data.txt
        dest: "/home/{{ ansible_user }}/vm-instance-data.txt"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Install required packages
      apt:
        name: 
          - unattended-upgrades
          - fail2ban
        state: present
        update_cache: yes

    - name: Enable automatic updates
      copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Download-Upgradeable-Packages "1";
          APT::Periodic::Unattended-Upgrade "1";
          APT::Periodic::AutocleanInterval "7";
          Unattended-Upgrade::Automatic-Reboot "false";

    - name: Configure unattended-upgrades
      copy:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        content: |
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}";
              "${distro_id}:${distro_codename}-security";
              "${distro_id}ESMApps:${distro_codename}-apps-security";
              "${distro_id}ESM:${distro_codename}-infra-security";
          };
          Unattended-Upgrade::Package-Blacklist {
          };
          Unattended-Upgrade::DevRelease "false";

    - name: Configure SSHD for ProxyJump
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - regexp: '^AllowTcpForwarding'
          line: 'AllowTcpForwarding yes'
        - regexp: '^PermitTunnel'
          line: 'PermitTunnel yes'
        - regexp: '^StreamLocalBindUnlink'
          line: 'StreamLocalBindUnlink yes'

    - name: Configure fail2ban
      copy:
        dest: /etc/fail2ban/jail.local
        content: |
          [DEFAULT]
          bantime = 3600
          findtime = 600
          maxretry = 5
          
          [sshd]
          enabled = true
          port = ssh
          filter = sshd
          logpath = /var/log/auth.log
          maxretry = 3
          bantime = 3600

    - name: Ensure fail2ban is running and enabled
      service:
        name: fail2ban
        state: started
        enabled: yes

    - name: Restart SSHD service
      service:
        name: sshd
        state: restarted

#   - name: Unconditionally reboot the machine with all defaults
#     ansible.builtin.reboot:

     
